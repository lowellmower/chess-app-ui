

<div class="col-md-9">
  <div class="chess-holder" data-user="<%= current_user.id %>">
    <div class="col-sm-2 timer-holder clock" style="font-size: 20px;">
      <div class="button-holder">
    <span class="glyphicon glyphicon-hourglass button-glyphs"></span>  <p>Player <b>1</b></p><span class="glyphicon glyphicon-minus button-glyphs"></span>
      </div>
        <div class="time-box">
          <div id="time0" class="time-digits"></div>
        </div>
        <div class="space-keeper">
          <p class="line-break"></p>
          <div class="player-info">
            <div class="user-header">
               <p><span class="glyphicon glyphicon-user button-glyphs"></span>ryanG360</p><br><br>
            </div>
            <p>Brooklyn, NY</p><br>
            <p>Ranking: 2400</p><br>
            <p>User Rank:
              <span class="glyphicon glyphicon-star"></span>
              <span class="glyphicon glyphicon-star"></span>
              <span class="glyphicon glyphicon-star"></span>

            </p>
          </div>
        </div>
        <div class="button-holder second-button-holder">
        <span class="glyphicon glyphicon-hourglass button-glyphs"></span><p>Player <b>2</b></p><span class="glyphicon glyphicon-minus button-glyphs"></span>
        </div>
        <div class="time-box">
          <div id="time1" class="time-digits"></div>
        </div>
        <div class="space-keeper">
          <p class="line-break"></p>
          <div class="player-info">
            <div class="user-header">
               <p><span class="glyphicon glyphicon-user button-glyphs"></span>tGold108</p><br><br>
            </div>
            <p>Long Beach, NY</p><br>
            <p>Ranking: 1200</p><br>
            <p>User Rank
              <span class="glyphicon glyphicon-star"></span>
              <span class="glyphicon glyphicon-star"></span>
              <span class="glyphicon glyphicon-star"></span>
              <span class="glyphicon glyphicon-star"></span>
            </p>
          </div>
        </div>
    </div>
    <div class="col-sm-8" id="board" style="width: 537px"></div>
    <!-- <p>Status: <span id="status"></span></p>
    <p>FEN: <span id="fen"></span></p>
    <p>PGN: <span id="pgn"></span></p> -->
    <div class="col-sm-2 captured-pieces">
      <div class="white-pieces">
        <div class="button-holder">
          <span class="glyphicon glyphicon-ok-circle button-glyphs"></span><p>Captured Black</p>
        </div>
      </div>
      <div class="space-bottom"></div>
      <div class="black-pieces">
        <div class="button-holder">
        <span class="glyphicon glyphicon-ok-circle button-glyphs"></span><p>Captured White</p>
        </div>
      </div>
      <div class="space-bottom"></div>
    </div>
  </div>
</div>

<div class="sidebar-nav col-md-3">
  <div class="table-holder container-sm">
  <table class="table text-holder">
    <tbody class="text-list">
    </tbody>
  </table>
  </div>
  <div class="buttons">
    <button class="btn"><span class="glyphicon glyphicon-hand-right button-glyphs"></span><li> <%= link_to 'DRAW', "#", style: 'text-decoration: none; color: white;' %></li></button>
    <td></td>
    <button class="btn"><span class="glyphicon glyphicon-flag button-glyphs"></span><li> <%= link_to 'QUIT', "#", style: 'text-decoration: none; color: white;' %></li></button>
  </div>
</div>

<div class="bottom-row"></div>
<div class="popup-chatbox">
  <div class="closed-box">
    <p class="closed-header">OPEN CHAT</p>
    <span class="glyphicon glyphicon-plus button-glyphs"></span>
  </div>
  <div class="open-box" style="display:none;">
    <div class="popup-head">
      <div class="popup-head-left"><p>OPPONENT</p></div>
      <div class="popup-head-right"><span class="glyphicon glyphicon-minus button-glyphs"></span></div>
    </div>
    <div class="popup-messages">
      <div class="message-content">
        <% @messages.each do |msg| %>
          <% if msg.sender_id == current_user.id %>
            <div class="message-wrapper">
              <div class="right">
                <p class="message-text"> <%= msg.body %></p><img src="/assets/profile.png">
              </div>
            </div>
          <% else %>
          <h6> <%= time_ago_in_words(msg.created_at) %> </h6>
            <div class="message-wrapper">
              <div class="left">
                <img src="/assets/profile.png"><p class="message-text"> <%= msg.body %></p>
              </div>
            </div>
          <% end %>
        <% end %>
      </div>
      <%= simple_form_for [@conversation, @message], remote: true, html: { autocomplete: 'off'} do |f| %>
          <%= f.hidden_field :sender_id, :id => 'message-sender' %>
          <%= f.hidden_field :recipient_id, :id => 'message-recipient'  %>
          <%= f.hidden_field :conversation_id %>
          <input type="text" <%= f.input_field :body, autofocus: true, :class => 'text-field' %>
          <%= f.button :submit, :label => 'send', :class => 'btn btn-primary send', :style => 'display: none;' %>
      <% end %>
    </div>
  </div>
</div>

<%= form_for [@room, @move], remote: true do |f| %>
    <%= f.hidden_field :notation, id: 'move-notation' %>
    <%= f.hidden_field :room_id  %>
    <%= f.hidden_field :user_id, id: 'move-user' %>
    <%= f.hidden_field :piece, id: 'move-piece'  %>
    <%= f.submit "", :id => 'move-submit', :style => 'display: none;' %>
<% end %>

<script>
$('#message-sender').val("<%= current_user ? current_user.id : null %>");
<% if current_user.id == @room.player1_id %>
$('#message-recipient').val("<%= @room.player2_id %>");
<% else %>
$('#message-recipient').val("<%= @room.player1_id %>");
<% end %>
</script>

<script src="/assets/chess.js"></script>
<script src="/assets/new_board.js"></script>

<script>
$(function() {
  if ("<%= current_user.id %>" === "<%= @room.player2_id %>") {
    board.orientation('black');
  }
  console.log("<%= current_user.id %>");
  console.log("<%= @room.player1_id %>");
  console.log("<%= @room.player2_id %>");

  $('.glyphicon-minus').click(function() {
    $(this).parent().parent().parent().toggle();
    $(this).parent().parent().parent().parent().find('.closed-box').toggle();
    $(this).parent().parent().parent().parent().addClass('popup-chatbox');
    $(this).parent().parent().parent().parent().removeClass('popup-expanded');
  });
  $('.glyphicon-plus').click(function() {
    $(this).parent().toggle();
    $(this).parent().parent().find('.open-box').toggle();
    $('.popup-chatbox').removeClass('pulsit');
    $(this).parent().parent().addClass('popup-expanded');
    $(this).parent().parent().removeClass('popup-chatbox');
    $('.open-box').find('.message-content').scrollTop($('.open-box').find('.message-content').prop("scrollHeight"));
  });

  var DateHelper = {
    // Takes the format of "Jan 15, 2007 15:45:00 GMT" and converts it to a relative time
    // Ruby strftime: %b %d, %Y %H:%M:%S GMT
    time_ago_in_words_with_parsing: function(from) {
      var date = new Date;
      date.setTime(Date.parse(from));
      return this.time_ago_in_words(date);
    },
    // Takes a timestamp and converts it to a relative time
    // DateHelper.time_ago_in_words(1331079503000)
    time_ago_in_words: function(from) {
      return this.distance_of_time_in_words(new Date, from);
    },

    distance_of_time_in_words: function(to, from) {
      var distance_in_seconds = ((to - from) / 1000);
      var distance_in_minutes = Math.floor(distance_in_seconds / 60);
      var tense = distance_in_seconds < 0 ? " from now" : " ago";
      distance_in_minutes = Math.abs(distance_in_minutes);
      if (distance_in_minutes == 0) { return 'less than a minute'+tense; }
      if (distance_in_minutes == 1) { return 'a minute'+tense; }
      if (distance_in_minutes < 45) { return distance_in_minutes + ' minutes'+tense; }
      if (distance_in_minutes < 90) { return 'about an hour'+tense; }
      if (distance_in_minutes < 1440) { return 'about ' + Math.floor(distance_in_minutes / 60) + ' hours'+tense; }
      if (distance_in_minutes < 2880) { return 'a day'+tense; }
      if (distance_in_minutes < 43200) { return Math.floor(distance_in_minutes / 1440) + ' days'+tense; }
      if (distance_in_minutes < 86400) { return 'about a month'+tense; }
      if (distance_in_minutes < 525960) { return Math.floor(distance_in_minutes / 43200) + ' months'+tense; }
      if (distance_in_minutes < 1051199) { return 'about a year'+tense; }

      return 'over ' + Math.floor(distance_in_minutes / 525960) + ' years';
    }
  };

  var pusher = new Pusher('f74ddd7f3eae987007b6');
  var channelName = 'private-conversation.' + "<%= current_user ? current_user.id.to_s : 'null' %>";
  var channel = pusher.subscribe(channelName);

  channel.bind('new_message', function(data) {

  var timeAgo = DateHelper.time_ago_in_words_with_parsing(data.time);
  $('.message-content').append('<h6>' + timeAgo + ' </h6><div class="message-wrapper"><div class="left"><img src="/assets/profile.png"><p class="message-text">' + data.message + '</p></div></div>');
  $('.open-box').find('.message-content').scrollTop($('.open-box').find('.message-content').prop("scrollHeight"));
  if ($('.open-box').css('display') === 'none') {
    $('.popup-chatbox').addClass('pulsit');
  }
  });


  channel.bind('new_move', function(data) {
    console.log(data.fen);
    console.log;
    console.log(data.object_notation);
    console.log(game.turn());

    onDrop(data.object_notation.split('-')[0], data.object_notation.split('-')[1]);
    board.move(data.object_notation);

    switchTurn();

    // variables for number of each piece on the board
    var numBlackPawns = (data.fen.split(" ")[0].match(/p/g) || []).length;
    var numWhitePawns = (data.fen.split(" ")[0].match(/P/g) || []).length;
    var numBlackRooks = (data.fen.split(" ")[0].match(/r/g) || []).length;
    var numWhiteRooks = (data.fen.split(" ")[0].match(/R/g) || []).length;
    var numBlackKnights = (data.fen.split(" ")[0].match(/n/g) || []).length;
    var numWhiteKnights = (data.fen.split(" ")[0].match(/N/g) || []).length;
    var numBlackBishops = (data.fen.split(" ")[0].match(/b/g) || []).length;
    var numWhiteBishops = (data.fen.split(" ")[0].match(/B/g) || []).length;
    var numBlackQueens = (data.fen.split(" ")[0].match(/q/g) || []).length;
    var numWhiteQueens = (data.fen.split(" ")[0].match(/Q/g) || []).length;

    // display captured pieces  - bp, wP, bk, wK, bb, wB, bq, wQ, br, wR

    // pawns
    var bPawnDiff = 8 - numBlackPawns;
    var numWindowBlackPawns = $('.black-pieces').find('img[src*=bP]').length;
    if (bPawnDiff > numWindowBlackPawns) {
      $('.black-pieces').append('<img src="/assets/bP.png" class="small-icons">');
    }
    var wPawnDiff = 8 - numWhitePawns;
    var numWindowWhitePawns = $('.white-pieces').find('img[src*=wP]').length;
    if (wPawnDiff > numWindowWhitePawns) {
      $('.white-pieces').append('<img src="/assets/wP.png" class="small-icons">');
    }

    // rooks
    var bRookDiff = 2 - numBlackRooks;
    var numWindowBlackRooks = $('.black-pieces').find('img[src*=bR]').length;
    if (bRookDiff > numWindowBlackRooks) {
      $('.black-pieces').append('<img src="/assets/bR.png" class="small-icons">');
    }
    var wRookDiff = 2 - numWhiteRooks;
    var numWindowWhiteRooks = $('.white-pieces').find('img[src*=wR]').length;
    if (wRookDiff > numWindowWhiteRooks) {
      $('.white-pieces').append('<img src="/assets/wR.png" class="small-icons">');
    }

    // knights
    var bKnightDiff = 2 - numBlackKnights;
    var numWindowBlackKnights = $('.black-pieces').find('img[src*=bN]').length;
    if (bKnightDiff > numWindowBlackKnights) {
      $('.black-pieces').append('<img src="/assets/bN.png" class="small-icons">');
    }
    var wKnightDiff = 2 - numWhiteKnights;
    var numWindowWhiteKnights = $('.white-pieces').find('img[src*=wN]').length;
    if (wKnightDiff > numWindowWhiteKnights) {
      $('.white-pieces').append('<img src="/assets/wN.png" class="small-icons">');
    }

    // bishops
    var bBishopDiff = 2 - numBlackBishops;
    var numWindowBlackBishops = $('.black-pieces').find('img[src*=bB]').length;
    if (bBishopDiff > numWindowBlackBishops) {
      $('.black-pieces').append('<img src="/assets/bB.png" class="small-icons">');
    }
    var wBishopDiff = 2 - numWhiteBishops;
    var numWindowWhiteBishops = $('.white-pieces').find('img[src*=wB]').length;
    if (wBishopDiff > numWindowWhiteBishops) {
      $('.white-pieces').append('<img src="/assets/wB.png" class="small-icons">');
    }

    // queens
    var bQueenDiff = 1 - numBlackQueens;
    var numWindowBlackQueens = $('.black-pieces').find('img[src*=bQ]').length;
    if (bQueenDiff > numWindowBlackQueens) {
      $('.black-pieces').append('<img src="/assets/bQ.png" class="small-icons">');
    }
    var wQueenDiff = 1 - numWhiteQueens;
    var numWindowWhiteQueens = $('.white-pieces').find('img[src*=wQ]').length;
    if (wQueenDiff > numWindowWhiteQueens) {
      $('.white-pieces').append('<img src="/assets/wQ.png" class="small-icons">');
    }
  });

  // set timer
  var addedTimePerMove, formatTime, initialTime, intervalId, pad, remainingTime, switchTurn, turn, update;
  initialTime = 15 * 60;
  addedTimePerMove = 0;
  turn = 1;
  remainingTime = [initialTime, initialTime];
  pad = function(x) {
   return ('0' + x).slice(-2);
  };
  formatTime = function(t) {
   var hours, minutes, seconds;
   seconds = t % 60;
   minutes = Math.floor(t / 60) % 60;
   hours = Math.floor(t / 3600);
   if (hours) {
     return "" + hours + ":" + (pad(minutes)) + ":" + (pad(seconds));
   } else {
     return "" + minutes + ":" + (pad(seconds));
   }
  };
  update = function() {
   var i;
   remainingTime[turn]--;
   for (i = 0; i < 2; i++) {
     $("#time" + i).text(formatTime(remainingTime[i]));
   }
   if (remainingTime[turn] <= 0) {
     $("#time" + turn).removeClass('turn').addClass('loser');
     alert('Game Over');
     return clearInterval(intervalId);
   }
  };
  switchTurn = function() {
     $("#time" + turn).removeClass('turn');
     turn = 1 - turn;
     $("#time" + turn).addClass('turn');
     return remainingTime[turn] += addedTimePerMove;
  };

  $('#time1').addClass('turn');
  return intervalId = setInterval(update, 1000);
});

</script>
